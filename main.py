import feedparser
from openai import OpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import asyncio
import logging
import os

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@sport_globus")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://mybot.onrender.com
PORT = int(os.getenv("PORT", 8080))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS
async def get_sports_news():
    feed = feedparser.parse("https://www.sports.ru/rss/all_news.xml")
    return feed.entries[:1]

# --- –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ OpenAI
async def summarize_news(text: str):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:\n{text}"}],
        max_tokens=150
    )
    return response.choices[0].message.content

# --- –ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª
async def post_news():
    news_list = await get_sports_news()
    for entry in news_list:
        summary = await summarize_news(entry.summary)
        msg = f"üèÜ {entry.title}\n\n{summary}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {entry.link}"
        await bot.send_message(CHANNEL_ID, msg)

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.message(Command("post_now"))
async def manual_post(message: types.Message):
    await post_news()
    await message.answer("‚úÖ –ü–æ—Å—Ç —Å–¥–µ–ª–∞–Ω –≤—Ä—É—á–Ω—É—é!")

# --- Scheduler (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –ø–æ—Å—Ç)
async def scheduler():
    while True:
        await post_news()
        await asyncio.sleep(24 * 60 * 60)

# --- –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞
async def on_startup(app: web.Application):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    # –°–æ–æ–±—â–∞–µ–º –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    await bot.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!")

async def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.on_startup.append(on_startup)

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–ø–æ—Å—Ç–∏–º —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    asyncio.create_task(scheduler())

    web.run_app(app, port=PORT)

if __name__ == "__main__":
    asyncio.run(main())
