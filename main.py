import os
import logging
import feedparser
from ai21 import AI21Client
from ai21.models.chat import ChatMessage
import requests
from datetime import datetime, timedelta
# –ù–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞
#from googletrans import AsyncTranslator
from deep_translator import GoogleTranslator
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Telegram-–±–æ—Ç–∞
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
# TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
# TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
# AI21_API_KEY = os.getenv("AI21_API_KEY")
# WEBHOOK_URL = os.getenv("WEBHOOK_URL")

TELEGRAM_TOKEN = "8495882876:AAH1xwbeyOqPRkquvz7aijF5iHa6US3IgNg"
TELEGRAM_CHANNEL_ID = "@sport_globus"
AI21_API_KEY = "f46255e8-8dfb-4bdb-abf0-cc8eb4450cd0"
WEBHOOK_URL = "https://sport-globus-bot.onrender.com/webhook"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à URL –≤—ñ–¥ Render.com

API_KEY = "bd6718b87c854edc8baf0880ac7e6992"

logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
ai21_client = AI21Client(api_key=AI21_API_KEY)
#translator = AsyncTranslator()


# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
def get_latest_news(language="ru"):
    """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É —Ñ—É—Ç–±–æ–ª—å–Ω—É –Ω–æ–≤–∏–Ω—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –∑ NewsAPI.org."""
    now = datetime.utcnow()
    yesterday = now - timedelta(days=3)
    from_date = yesterday.strftime("%Y-%m-%dT%H:%M:%S")
    to_date = now.strftime("%Y-%m-%dT%H:%M:%S")

    url = "https://newsapi.org/v2/everything"
    params = {
        "q": "football OR soccer",
        "from": from_date,
        "to": to_date,
        "language": language,
        "sortBy": "popularity",
        "pageSize": 5,
        "apiKey": API_KEY
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {response.status_code}")
        return None

    articles = response.json().get("articles", [])
    if not articles:
        logging.info(f"–ù–µ–º–∞—î –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –Ω–∞ {language}")
        return None

    top_article = articles[0]
    return {
        "title": top_article["title"],
        "link": top_article["url"],
        "summary": top_article.get("description", ""),
        "published": top_article["publishedAt"],
        "source": top_article["source"]["name"],
        "image": top_article.get("urlToImage")
    }


# –§—É–Ω–∫—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω
# –§—É–Ω–∫—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω
async def post_news(app):
    """–ü—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω–∏ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    from telegram import InputMediaPhoto

    # --- –†–æ—Å—ñ–π—Å—å–∫–∞ –Ω–æ–≤–∏–Ω–∞ ---
    news_ru = get_latest_news(language="ru")
    if news_ru:
        caption = f"üì∞ {news_ru['title']}\n\n{news_ru['summary']}\n\nüîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {news_ru['link']}"
        try:
            if news_ru.get("image"):
                await app.bot.send_photo(chat_id=TELEGRAM_CHANNEL_ID, photo=news_ru["image"], caption=caption)
            else:
                await app.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=caption)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –Ω–æ–≤–∏–Ω–∏: {e}")

    # --- –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –Ω–æ–≤–∏–Ω–∞ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ deep_translator) ---
    news_en = get_latest_news(language="en")
    if news_en:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, –ø–æ—ç—Ç–æ–º—É 'await' –Ω–µ –Ω—É–∂–µ–Ω
            translator = GoogleTranslator(source='en', target='ru')
            title_ru = translator.translate(news_en["title"])
            summary_ru = translator.translate(news_en.get("summary", ""))

            caption = f"üì∞ {title_ru}\n\n{summary_ru}\n\nüîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {news_en['link']}"

            if news_en.get("image"):
                await app.bot.send_photo(chat_id=TELEGRAM_CHANNEL_ID, photo=news_en["image"], caption=caption)
            else:
                await app.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=caption)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–æ–≤–∏–Ω–∏ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º: {e}")

# –§—É–Ω–∫—Ü—ñ—è —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—ó
def summarize_text(text: str) -> str:
    """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI21 –¥–ª—è —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É."""
    try:
        response = ai21_client.chat.completions.create(
            model="jamba-large-1.7",
            messages=[ChatMessage(role="user", content=f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏:\n\n{text}")]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"AI21 –ø–æ–º–∏–ª–∫–∞: {e}")
        return None


# –ö–æ–º–∞–Ω–¥–∞ /post_now
async def post_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É –≤ –∫–∞–Ω–∞–ª –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é."""
    await post_news(context.application)
    await update.message.reply_text("üì∞ –ù–æ–≤–∏–Ω—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É!")


# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
def main():
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("post_now", post_now))

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è web-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook
        port = int(os.environ.get("PORT", 5000))

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
        # app.run_webhook —Å–∞–º –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook URL –Ω–∞ Render.com
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path="/",
            webhook_url=WEBHOOK_URL
        )

        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
    # –¶–µ–π –∫–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É —ñ –Ω–µ –±–ª–æ–∫—É—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    # news = get_latest_news()
    # if news:
    #     print("üì∞", news["title"])
    #     print("üîó", news["link"])
    #     print("üìù", news["summary"])
    #     print("üñº", news["image"])