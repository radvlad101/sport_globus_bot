import feedparser
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
import logging

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8495882876:AAFkTpIJyLjwsV47aMqwSkB5UHcz7810Ckk"
CHANNEL_ID = "@sport_globus"
openai.api_key = "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"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# üîπ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS
async def get_sports_news():
    url = "https://www.sports.ru/rss/all_news.xml"
    feed = feedparser.parse(url)
    return feed.entries[:1]  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å

# üîπ –î–µ–ª–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ OpenAI
async def summarize_news(text):
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:\n{text}"}],
        max_tokens=150
    )
    return response.choices[0].message["content"]

# üîπ –ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
async def post_news():
    news_list = await get_sports_news()
    for entry in news_list:
        summary = await summarize_news(entry.summary)
        image_url = entry.get('media_content', [{'url': None}])[0]['url']

        msg = f"üèÜ {entry.title}\n\n{summary}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {entry.link}"

        if image_url:
            await bot.send_photo(CHANNEL_ID, photo=image_url, caption=msg)
        else:
            await bot.send_message(CHANNEL_ID, msg)

# üîπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞
@dp.message(Command("post_now"))
async def manual_post(message: types.Message):
    await post_news()
    await message.answer("‚úÖ –ü–æ—Å—Ç —Å–¥–µ–ª–∞–Ω –≤—Ä—É—á–Ω—É—é!")

# üîπ –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
async def scheduler():
    while True:
        await post_news()
        await asyncio.sleep(24 * 60 * 60)  # –∂–¥–∞—Ç—å 1 –¥–µ–Ω—å


async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
