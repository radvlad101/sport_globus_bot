import asyncio
import logging
import feedparser
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from ai21 import AI21Client
from ai21.models.chat import ChatMessage

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = "8495882876:AAH1xwbeyOqPRkquvz7aijF5iHa6US3IgNg"
CHANNEL_ID = "@sport_globus"
AI21_API_KEY = "f46255e8-8dfb-4bdb-abf0-cc8eb4450cd0"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# ====== –ö–ª–∏–µ–Ω—Ç AI21 ======
client = AI21Client(api_key=AI21_API_KEY)


# ====== –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI21 ======
async def summarize_text(text: str) -> str:
    try:
        response = client.chat.completions.create(
            model="jamba-large",
            messages=[
                ChatMessage(role="system", content="–¢—ã ‚Äî –±–æ—Ç, –¥–µ–ª–∞—é—â–∏–π –∫—Ä–∞—Ç–∫–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."),
                ChatMessage(role="user", content=f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å:\n\n{text}\n\n–ö—Ä–∞—Ç–∫–æ:")
            ],
            max_tokens=150
        )
        return response.output_text.strip()
    except Exception as e:
        logging.error(f"AI21 error: {e}")
        return None


# ====== –ü–∞—Ä—Å–∏–º sports.ru ======
async def fetch_latest_news():
    feed_url = "https://www.sports.ru/sports.xml"
    feed = feedparser.parse(feed_url)
    if feed.entries:
        entry = feed.entries[0]
        title = entry.title
        link = entry.link
        summary = await summarize_text(entry.summary)

        text = f"üèÜ {title}\n\n"
        if summary:
            text += f"{summary}\n\n"
        else:
            text += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é\n\n"
        text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"

        return text
    return None


# ====== –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª ======
async def post_latest_news():
    news = await fetch_latest_news()
    if news:
        await bot.send_message(CHANNEL_ID, news)


# ====== –ö–æ–º–∞–Ω–¥–∞ /start ======
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ø–æ—Ä—Ç-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /post_now —á—Ç–æ–±—ã –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å.")


# ====== –ö–æ–º–∞–Ω–¥–∞ /post_now ======
@dp.message(Command("post_now"))
async def cmd_post_now(message: types.Message):
    await message.answer("‚è≥ –ë–µ—Ä—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å...")
    await post_latest_news()
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")


# ====== –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞–∑ –≤ 1 –¥–µ–Ω—å ======
async def auto_posting():
    while True:
        logging.info("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –ø—É–±–ª–∏–∫—É—é –Ω–æ–≤–æ—Å—Ç—å...")
        await post_latest_news()
        await asyncio.sleep(24 * 60 * 60)  # –∂–¥–∞—Ç—å 1 –¥–µ–Ω—å


# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    task_bot = asyncio.create_task(dp.start_polling(bot))
    task_auto = asyncio.create_task(auto_posting())
    await asyncio.gather(task_bot, task_auto)


if __name__ == "__main__":
    asyncio.run(main())
