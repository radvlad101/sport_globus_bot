import os
import logging
import feedparser
from ai21 import AI21Client
from ai21.models.chat import ChatMessage
import telegram
print(telegram.__version__)

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "@mychannel"
AI21_API_KEY = os.getenv("AI21_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://mydomain.com/webhook

logging.basicConfig(level=logging.INFO)

# --- AI21 ---
ai21_client = AI21Client(api_key=AI21_API_KEY)

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ ---
def get_latest_news():
    feed_url = "https://www.sports.ru/rss/all_news.xml"
    feed = feedparser.parse(feed_url)

    if not feed.entries:
        logging.error("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ RSS")
        return None

    item = feed.entries[0]
    return {"title": item.title, "link": item.link, "summary": item.get("summary", "")}

# --- AI21 —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ---
def summarize_text(text: str) -> str:
    try:
        response = ai21_client.chat.completions.create(
            model="jamba-large-1.7",
            messages=[ChatMessage(role="user", content=f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏:\n\n{text}")]
        )
        return response.outputs[0].content[0].text.strip()
    except Exception as e:
        logging.error(f"AI21 –æ—à–∏–±–∫–∞: {e}")
        return None

# --- –ü–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–∏ ---
async def post_news(app: Application):
    news = get_latest_news()
    if not news:
        return

    summary = summarize_text(news["summary"] or news["title"])
    if not summary:
        summary = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é."

    message = f"üì∞ {news['title']}\n\n{summary}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news['link']}"

    try:
        await app.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message)
        logging.info("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /post_now ---
async def post_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await post_news(context.application)
    await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é!")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞
    app.add_handler(CommandHandler("post_now", post_now))

    # –í–µ–±—Ö—É–∫ –≤–º–µ—Å—Ç–æ polling
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
